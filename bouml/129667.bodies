class ResultsAnalyzer
!!!134019.java!!!	ResultsAnalyzer(inout schedulingSystem : SchedulingSystem)
		this.setSchedulingSystem(schedulingSystem);
		this.setAnalysis("");
!!!134147.java!!!	analyze() : void
		SchedulingSystem schedulingSystem = this.getSchedulingSystem();
		CompLogginSystem logger = schedulingSystem.getCompLogginSystem();

		int numberOfErrors = 0;
		if (logger.getErrorMsgs() != null)
			numberOfErrors = logger.getErrorMsgs().size();
		this.setNumberOfErrors(numberOfErrors);

		this.setDeadline(schedulingSystem.getDeadline());

		Vector<SimulationTime> simulationTimes = logger.getSimulationTimes();
		this.setNumberOfCycles(simulationTimes.size());

		int nbrSuccessfulTasks = schedulingSystem.getFinishedList().size();
		this.setNbrSuccessfulTasks(nbrSuccessfulTasks);

		int nbrFailedTasks = schedulingSystem.getFailedFinishedList().size();
		this.setNbrFailedTasks(nbrFailedTasks);

		int numberOfTasks = nbrSuccessfulTasks + nbrFailedTasks;
		this.setNumberOfTasks(numberOfTasks);

		int numberOfActors = this.getSchedulingSystem().getActorsList().size();
		this.setNumberOfActors(numberOfActors);

		int numberOfResources = this.getSchedulingSystem().getResourcesList()
				.size();
		this.setNumberOfResources(numberOfResources);

		float meanNbrTasksPerActor = (float) numberOfTasks
				/ (float) numberOfActors;
		this.setMeanNbrTasksPerActor(meanNbrTasksPerActor);

		float propFinishedTasks = (float) nbrSuccessfulTasks
				/ (float) numberOfTasks;
		this.setPropFinishedTasks(propFinishedTasks);

		float propFailedTasks = (float) nbrFailedTasks / (float) numberOfTasks;
		this.setPropFailedTasks(propFailedTasks);

		float propVelocity = (float) this.getDeadline()
				/ (float) this.getNumberOfCycles();
		this.setPropVelocity(propVelocity);

		this.renderAnalysis();

!!!134275.java!!!	getAnalysis() : String
		return analysis;
!!!134403.java!!!	getDeadline() : int
		return deadline;
!!!134531.java!!!	getMeanNbrTasksPerActor() : float
		return meanNbrTasksPerActor;
!!!134659.java!!!	getNbrFailedTasks() : int
		return nbrFailedTasks;
!!!134787.java!!!	getNbrSuccessfulTasks() : int
		return nbrSuccessfulTasks;
!!!134915.java!!!	getNumberOfActors() : int
		return numberOfActors;
!!!135043.java!!!	getNumberOfCycles() : int
		return numberOfCycles;
!!!135171.java!!!	getNumberOfErrors() : int
		return numberOfErrors;
!!!135299.java!!!	getNumberOfResources() : int
		return numberOfResources;
!!!135427.java!!!	getNumberOfTasks() : int
		return numberOfTasks;
!!!135555.java!!!	getPropFailedTasks() : float
		return propFailedTasks;
!!!135683.java!!!	getPropFinishedTasks() : float
		return propFinishedTasks;
!!!135811.java!!!	getPropVelocity() : float
		return this.propVelocity;
!!!135939.java!!!	getSchedulingSystem() : SchedulingSystem
		return schedulingSystem;
!!!136067.java!!!	print() : void
		System.out.println(this.getAnalysis());
!!!136195.java!!!	renderAnalysis() : void
		String analysis = this.getAnalysis();

		analysis += "Results Analisys \n\n";

		analysis += "  Number of errors: " + this.getNumberOfErrors() + "\n";

		analysis += "  Deadline (in cycles): " + this.getDeadline() + "\n";

		analysis += "  Number of cycles: " + this.getNumberOfCycles() + "\n";

		analysis += "  Total number of executed tasks *: "
				+ this.getNumberOfTasks() + "\n";

		analysis += "  Number of successful tasks *: "
				+ this.getNbrSuccessfulTasks() + "\n";

		analysis += "  Number of failed tasks: " + this.getNbrFailedTasks()
				+ "\n";

		analysis += "  Number of actors: " + this.getNumberOfActors() + "\n";

		analysis += "  Number of other resources (artifacts): "
				+ this.getNumberOfResources() + "\n";

		analysis += "  Mean number of tasks per actor: "
				+ this.getMeanNbrTasksPerActor() + "\n";

		analysis += "  Proportions: \n";

		analysis += "    Successful tasks *: " + this.getPropFinishedTasks()
				+ "\n";

		analysis += "    Failed tasks *: " + this.getPropFailedTasks() + "\n";

		analysis += "    Velocity (deadline/nbrOfCycles): "
				+ this.getPropVelocity() + "\n";

		analysis += "\n  *: with contigency tasks\n";

		String aux = this.getSchedulingSystem().getCompLogginSystem()
				.renderErrors();

		if (aux != "")
			analysis += "\n\n  " + aux + "\n";

		this.setAnalysis(analysis);
!!!136323.java!!!	setAnalysis(in analysis : String) : void
		this.analysis = analysis;
!!!136451.java!!!	setDeadline(in deadline : int) : void
		this.deadline = deadline;
!!!136579.java!!!	setMeanNbrTasksPerActor(in meanNbrTasksPerActor : float) : void
		this.meanNbrTasksPerActor = meanNbrTasksPerActor;
!!!136707.java!!!	setNbrFailedTasks(in nbrFailedTasks : int) : void
		this.nbrFailedTasks = nbrFailedTasks;
!!!136835.java!!!	setNbrSuccessfulTasks(in nbrSuccessfulTasks : int) : void
		this.nbrSuccessfulTasks = nbrSuccessfulTasks;
!!!136963.java!!!	setNumberOfActors(in numberOfActors : int) : void
		this.numberOfActors = numberOfActors;
!!!137091.java!!!	setNumberOfCycles(in numberOfCycles : int) : void
		this.numberOfCycles = numberOfCycles;
!!!137219.java!!!	setNumberOfErrors(in numberOfErrors : int) : void
		this.numberOfErrors = numberOfErrors;
!!!137347.java!!!	setNumberOfResources(in numberOfResources : int) : void
		this.numberOfResources = numberOfResources;
!!!137475.java!!!	setNumberOfTasks(in numberOfTasks : int) : void
		this.numberOfTasks = numberOfTasks;
!!!137603.java!!!	setPropFailedTasks(in propFailedTasks : float) : void
		this.propFailedTasks = propFailedTasks;
!!!137731.java!!!	setPropFinishedTasks(in propFinishedTasks : float) : void
		this.propFinishedTasks = propFinishedTasks;
!!!137859.java!!!	setPropVelocity(in propVelocity : float) : void
		this.propVelocity = propVelocity;
!!!137987.java!!!	setSchedulingSystem(inout schedulingSystem : SchedulingSystem) : void
		this.schedulingSystem = schedulingSystem;
!!!138115.java!!!	writeAnalysis() : void
		String analysis = this.getAnalysis();
		String fileName = this.getSchedulingSystem().getConfigurator()
				.getOutputDir()
				+ this.getSchedulingSystem().getConfigurator().getProjectName()
				+ "_analysis.txt";
		FileManager fileManager = new FileManager();
		fileManager.writeFile(fileName, analysis);
